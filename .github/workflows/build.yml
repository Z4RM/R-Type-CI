name: Build executables with CMake on Linux and Windows

on:
  workflow_call:
    inputs:
      EXECUTABLES:
        description: "Comma-separated list of executables to check"
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          # Linux, Release, latest GCC compiler toolchain on the default runner image, default generator
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          # Linux, Release, latest Clang compiler toolchain on the default runner image, default generator
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Conan
      run: pip install conan

    - name: Configure Conan
      run: |
        conan profile detect --name default
        #conan profile update settings.compiler=${{ matrix.cpp_compiler }} default
        #conan profile update settings.compiler.cppstd=17 default
        #conan profile update settings.build_type=${{ matrix.build_type }} default
        #conan profile update settings.compiler.version=default default

    - name: Install dependencies with Conan
      run: conan install . --output-folder=${{ steps.strings.outputs.build-output-dir }} --build=missing -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

    - run: |
        cmake --version
        ls

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        --preset conan-default
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --preset conan-default

    - name: Verify executables
      timeout-minutes: 2
      run: |
        for executable in ${EXECUTABLES//,/ }; do
          if [ ! -x "$executable" ]; then
            echo "::error file=$executable,title=Executable problem::This executable does not exist or is not executable"
            exit 1
          fi
        done

    - name: Check for un-encapsulated GLibC usage in executables
      timeout-minutes: 2
      run: |
        export PATH="$PATH:$(pwd)/.github/workflows/executables"
        for executable in ${EXECUTABLES//,/ }; do
          GLIBCHECKER_GH_ACTIONS="true" glib_checker "$executable"
        done

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
